[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "e3sm_to_cmip"
dynamic = ["version"]
description = "Transform E3SM model data output into CMIP compatible data using the Climate Model Output Rewriter."
authors = [
    {name = "Sterling Baldwin"},
    {name = "Tom Vo", email = "vo13@llnl.gov"},
    {name = "Chengzhu (Jill) Zhang", email = "zhang40@llnl.gov"},
    {name = "Anthony Bartoletti"}
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
keywords = ["e3sm_to_cmip"]
dependencies = [
  "cmor>=3.7.0",
  "dask",
  # "nco" is not available on PyPI, but is required for the E3SM to CMIP conversion.
  # It can be installed via conda or from source.
  # "nco >= 5.1.4",
  "netcdf4",
  "numpy >=2.0.0,<3.0.0",
  "pyyaml",
  "tqdm",
  "xarray >=2024.03.0",
  "xcdat>=0.8.0",
]

[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
dev = [
  "ruff",
  "mypy",
  "pre-commit",
  "isort",
  "types-pytz",
  "types-PyYAML",
  "types-tqdm"
]

[project.urls]
homepage = "https://github.com/E3SM-Project/e3sm_to_cmip"

[project.scripts]
e3sm_to_cmip = "e3sm_to_cmip.main:main"

[tool.setuptools.packages.find]
include = ["e3sm_to_cmip", "e3sm_to_cmip.*"]

[tool.setuptools.package-data]
"e3sm_to_cmip" = ["LICENSE"]

[tool.setuptools.dynamic]
version = { attr = "e3sm_to_cmip.__version__" }

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "docs",
  "node_modules",
  "site-packages",
  "venv",
]

[tool.ruff.lint]
# E4 - whitespace
# E7 - multiple-statements
# E9 - trailing-whitespace
# F - Enable Pyflakes
# B - Enable flake8-bugbear
# W - Enable pycodestyle
# C901 - complex-structure
# D - Enable flake8-docstrings
select = ["E4", "E7", "E9", "F", "B", "W", "C901"]

# E501 - line-too-long
ignore = ["E501"]

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
# Docs: https://docs.pytest.org/en/7.2.x/reference/customize.html#configuration
junit_family = "xunit2"
addopts = "--cov=e3sm_to_cmip --cov-report term --cov-report html:tests_coverage_reports/htmlcov --cov-report xml:tests_coverage_reports/coverage.xml -s"
python_files = ["tests.py", "test_*.py"]

[tool.mypy]
# Docs: https://mypy.readthedocs.io/en/stable/config_file.html
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[[tool.mypy.overrides]]
# cmor type stubs does not exist and there are no plans to add them.
# netCDF4 type stubs has not been added yet (https://github.com/python/typeshed/issues/9545)
module = ["cmor.*", "netCFD4.*"]
follow_imports = "skip"
follow_imports_for_stubs = true
